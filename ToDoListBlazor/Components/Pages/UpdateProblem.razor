@page "/update/{Id}"
@using ToDoListBlazor.Models
@using ToDoListBlazor.Services
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3>Изменить задачу</h3>

<EditForm FormName="ProblemForm" Model="pModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="Title">Наименование:</label>
        <InputText id="Title" @bind-Value="pModel.Title" />
    </div>

    <div>
        <label for="Description">Описание:</label>
        <InputTextArea id="Description" @bind-Value="pModel.Description" />
    </div>

    <div>
        <label for="Executors">Исполнители:</label>
        <InputTextArea id="Executors" @bind-Value="pModel.Executors" />
    </div>

    <div>
        <label for="Status">Статус:</label>
        <InputSelect id="Status" @bind-Value="pModel.Status">
            @foreach (var status in availableStatuses)
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>

    <div>
        <label for="PlannedComplexityTime">Плановая трудоемкость задачи:</label>
        <InputNumber id="PlannedComplexityTime" @bind-Value="pModel.PlannedComplexityTime" min="0" /> Дней
    </div>

    <div>
        <button type="submit">Обновить</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private Problem pModel = new();
    private ProblemManager pManager = new();

    List<ProblemStatus> availableStatuses = new();

    protected override void OnInitialized()
    {
        pModel = pManager.GetProblemData(int.Parse(Id));

        availableStatuses = new List<ProblemStatus> { pModel.Status };

        if (pModel.Status == ProblemStatus.CREATED)
        {
            availableStatuses.Add(ProblemStatus.PROCESSING);
        }
        else if (pModel.Status == ProblemStatus.PROCESSING)
        {
            availableStatuses.Add(ProblemStatus.PAUSED);
        }
        else if (pModel.Status == ProblemStatus.PAUSED)
        {
            availableStatuses.Add(ProblemStatus.DONE);
        }
    }        

    private void HandleValidSubmit()
    {

        if (pModel.Status == ProblemStatus.DONE)
        {
            if (pManager.CheckSubProblems(pModel))
            {
                pModel.FinishDate = DateTime.Now;
                pModel.FactTime = (int)pModel.FinishDate.Value.Subtract(pModel.StartDate).TotalDays;
                pModel.FactTime = pManager.CalculateFactTime(pModel);

                pManager.DoneAllSubProblems(pModel);
            }
        }
        pManager.UpdateProblemDetails(pModel);

        NavManager.NavigateTo("/", forceLoad: true);
    }
}



