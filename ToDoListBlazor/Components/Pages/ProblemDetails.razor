@page "/problem"
@using ToDoListBlazor.Models
@using ToDoListBlazor.Services
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>Problem Detail</PageTitle>

@code {
    private string id;
    private Problem problem;
    private ProblemManager pManager = new();

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            problem = pManager.GetProblemData(int.Parse(id));
        }
    }

    private void UpdateProblemDetails(int id)
    {
        NavManager.NavigateTo($"/update/{id}");
    }

    private void AddSubProblem(int id)
    {
        NavManager.NavigateTo($"/addsub/{id}");
    }

    private void test()
    {
        Console.WriteLine("test");
    }
}

@if (problem != null)
{
    <div class="buttons">
        @if (problem.FinishDate == null)
        {
            <button class="abutton" @onclick="()=>UpdateProblemDetails(problem.Id)">Изменить</button>
            <button class="abutton" @onclick="()=>AddSubProblem(problem.Id)">Добавить подзадачу</button>
        }
        @* <button class="btn btn-danger" @onclick="test">Тест</button> *@
        <button class="btn btn-danger" @onclick="() => pManager.DeleteProblem(problem.Id)">Удалить</button>

    </div>
    <p>Дата создания: @problem.StartDate</p>
    @if (problem.FinishDate != null)
    {
        <p>Дата завершения: @problem.FinishDate</p>
        <p>Время выполнения: @problem.FactTime</p>
    }
    <b>@problem.Title</b>
    <p>@problem.Description</p>
}

