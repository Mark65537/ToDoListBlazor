@page "/add"
@using ToDoListBlazor.Models
@using ToDoListBlazor.Services
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3>Создать задачу</h3>

<EditForm FormName="ProblemForm" Model="pModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="Title">Наименование:</label>
        <InputText id="Title" @bind-Value="pModel.Title" />
    </div>

    <div>
        <label for="Description">Описание:</label>
        <InputTextArea id="Description" @bind-Value="pModel.Description" />
    </div>

    <div>
        <label for="Executors">Исполнители:</label>
        <InputTextArea id="Executors" @bind-Value="pModel.Executors" />
    </div>

    <div>
        <label for="PlannedComplexityTime">Плановая трудоемкость задачи:</label>
        <InputNumber id="PlannedComplexityTime" @bind-Value="pModel.PlannedComplexityTime" min="1" /> Дней
    </div>

    <div>
        <button type="submit">Создать</button>
    </div>
</EditForm>

@code {
    private Problem pModel = new();
    private ProblemManager pManager = new();

    private char separator = '|';

    private void CalculatePlannedComplexityTime(Problem problem)
    {
        if (!string.IsNullOrEmpty(problem.SubProblemsId))
        {
            IEnumerable<int> subProblemIds = null;

            if (problem.SubProblemsId.Contains(separator))
            {
                subProblemIds = problem.SubProblemsId.Split(separator).Select(int.Parse);
            }
            else
            {
                subProblemIds = Enumerable.Repeat(int.Parse(problem.SubProblemsId), 1);
            }

            var subProblems = subProblemIds.Select(id => pManager.GetProblemData(id))
                               .Where(subProblem => subProblem != null)
                               .ToList();
            foreach (var subProblem in subProblems)
            {               
                CalculatePlannedComplexityTime(subProblem);
            }
        }
    }

    private void HandleValidSubmit()
    {        
        pModel.StartDate = DateTime.Now;
        pManager.AddProblem(pModel);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}


